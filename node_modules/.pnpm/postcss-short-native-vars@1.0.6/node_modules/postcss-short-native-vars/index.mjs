import postcss from 'postcss';

const replacer = (str, isProp) => {
  if (isProp) return str.replace("$", "--");

  if (str.match(/\$([A-Za-z0-9_-]*)/g)) {
    return str.replace(/\$([A-Za-z0-9_-]*)/g, (match, p1) => {
      if (match[match.length - 1] !== " ") return `var(--${p1})`;
      return `var(--${p1}) `;
    });
  }
};

var index = postcss.plugin("postcss-postcss-test-plugin", () => {
  return root => {
    var _root$nodes;

    root === null || root === void 0 ? void 0 : (_root$nodes = root.nodes) === null || _root$nodes === void 0 ? void 0 : _root$nodes.forEach(node => {
      var _node$nodes;

      if (node.type === "atrule" && node.name === "define-mixin") {
        return node;
      }

      node === null || node === void 0 ? void 0 : (_node$nodes = node.nodes) === null || _node$nodes === void 0 ? void 0 : _node$nodes.forEach(node => {
        var _node$prop, _node$value;

        if (node !== null && node !== void 0 && (_node$prop = node.prop) !== null && _node$prop !== void 0 && _node$prop.startsWith("$")) {
          node.prop = replacer(node === null || node === void 0 ? void 0 : node.prop, true);
        }

        if (node !== null && node !== void 0 && (_node$value = node.value) !== null && _node$value !== void 0 && _node$value.includes("$")) node.value = replacer(node === null || node === void 0 ? void 0 : node.value);
      });
    });
  };
});

export default index;
//# sourceMappingURL=index.mjs.map
